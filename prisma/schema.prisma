// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Profile information
  profile       Profile?

  // Relationships
  addresses     Address[]
  orders        Order[]
  reviews       Review[]
  carts         Cart[]
  wishlist      WishlistItem[]
  paymentMethods PaymentMethod[]

  // Auth
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Profile model
model Profile {
  id          String   @id @default(cuid())
  bio         String?  @db.Text
  phone       String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Address model
model Address {
  id          String   @id @default(cuid())
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  orders      Order[]
}

// Payment method model
model PaymentMethod {
  id              String   @id @default(cuid())
  type            String   // credit_card, paypal, etc.
  provider        String
  accountNumber   String?
  expiryDate      String?
  isDefault       Boolean  @default(false)
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  orders          Order[]
}

// Product model
model Product {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  compareAtPrice Decimal? @db.Decimal(10, 2)
  sku         String?  @unique
  barcode     String?  @unique
  inventory   Int      @default(0)
  isVisible   Boolean  @default(true)
  weight      Decimal? @db.Decimal(10, 2)
  dimensions  String?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
  wishlistItems WishlistItem[]
}

// Product image model
model ProductImage {
  id          String   @id @default(cuid())
  url         String
  alt         String?
  position    Int      @default(0)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Product variant model
model ProductVariant {
  id          String   @id @default(cuid())
  name        String
  sku         String?  @unique
  price       Decimal  @db.Decimal(10, 2)
  inventory   Int      @default(0)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  options     VariantOption[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

// Variant option model
model VariantOption {
  id              String   @id @default(cuid())
  name            String   // e.g., "Color", "Size"
  value           String   // e.g., "Red", "XL"
  productVariantId String
  productVariant  ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
}

// Category model
model Category {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  slug        String   @unique
  parentId    String?
  parent      Category? @relation("CategoryToSubcategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToSubcategory")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  products    Product[]
}

// Order model
model Order {
  id              String   @id @default(cuid())
  orderNumber     String   @unique
  status          OrderStatus @default(PENDING)
  total           Decimal  @db.Decimal(10, 2)
  subtotal        Decimal  @db.Decimal(10, 2)
  tax             Decimal  @db.Decimal(10, 2)
  shipping        Decimal  @db.Decimal(10, 2)
  discount        Decimal  @db.Decimal(10, 2) @default(0)
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  addressId       String?
  address         Address? @relation(fields: [addressId], references: [id])
  paymentMethodId String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  paymentIntentId String?
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relationships
  items           OrderItem[]
  statusUpdates   OrderStatusUpdate[]
}

// Order item model
model OrderItem {
  id              String   @id @default(cuid())
  quantity        Int
  price           Decimal  @db.Decimal(10, 2)
  orderId         String
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  productVariantId String?
  productVariant  ProductVariant? @relation(fields: [productVariantId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Order status update model
model OrderStatusUpdate {
  id          String      @id @default(cuid())
  status      OrderStatus
  message     String?     @db.Text
  orderId     String
  order       Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
}

// Review model
model Review {
  id          String   @id @default(cuid())
  rating      Int
  title       String?
  content     String?  @db.Text
  isPublished Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Cart model
model Cart {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId   String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  items       CartItem[]
}

// Cart item model
model CartItem {
  id              String   @id @default(cuid())
  quantity        Int
  cartId          String
  cart            Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId       String
  product         Product  @relation(fields: [productId], references: [id])
  productVariantId String?
  productVariant  ProductVariant? @relation(fields: [productVariantId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Wishlist item model
model WishlistItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([userId, productId])
}

// Enums
enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}
